import { Component, Input } from '@angular/core';
import { DefaultFormBaseComponent } from '@polpware/ngx-form-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@polpware/ngx-logger";
import * as i3 from "@angular/common";
import * as i4 from "@polpware/ngx-pipes";
function findFirstDuplicate(array) {
    var valuesSoFar = Object.create(null);
    for (let i = 0; i < array.length; ++i) {
        const value = array[i];
        if (value in valuesSoFar) {
            return value;
        }
        valuesSoFar[value] = true;
    }
    return '';
}
function makeFormValidator(targetColumns) {
    return (control) => {
        // Make sure that
        const mappings = control.get('mappings');
        const subset = mappings.controls.filter((x) => {
            const checked = x.get('targetId');
            return !!checked.value;
        });
        const targetIds = subset.map((y) => {
            return y.get('targetId').value;
        });
        // Check redundancy
        const anyDuplicate = findFirstDuplicate(targetIds);
        if (anyDuplicate) {
            const desc = targetColumns.find(a => a.id == anyDuplicate);
            return {
                duplicate: `${desc?.label}(${desc?.id})`
            };
        }
        // Check if all required are included.
        const anyMissing = targetColumns
            .filter(a => a.required)
            .find(b => !targetIds.some(c => c == b.id));
        if (anyMissing) {
            return {
                missing: `${anyMissing.label}(${anyMissing.id})`
            };
        }
        return null;
    };
}
export class DefineColumnMappingComponent extends DefaultFormBaseComponent {
    constructor(_builder, loggerProvider) {
        super();
        this._builder = _builder;
        this.sourceColumns = [];
        this.targetColumns = [];
        this.initValue = [];
        this._logger = loggerProvider.logger('polp_data_transport_define_column_mapping');
    }
    get mappings() {
        return this.form.get('mappings');
    }
    ngOnInit() {
        // Build form
        this.form = this._builder.group({
            mappings: this._builder.array([])
        }, { validators: [makeFormValidator(this.targetColumns)] });
        this._subr = this.form.valueChanges.subscribe(a => {
            const b = a.mappings;
            const c = b.filter(b => b.targetId);
            this.onValueChanged.emit(c);
            this.onValidation.emit(this.form.errors);
        });
        this.sourceColumns.forEach(source => {
            // Build mapping entries
            const record = {
                checked: false,
                sourceId: source.id,
                targetId: ''
            };
            const anyMap = this.initValue.find(x => x.sourceId == source.id);
            if (anyMap) {
                record.targetId = anyMap.targetId;
            }
            this.mappings.push(this._builder.group(record));
        });
    }
    ngOnDestroy() {
        this._subr && this._subr.unsubscribe();
    }
    sourceLabel(i) {
        const id = this.mappings.controls[i].value.sourceId;
        return this.sourceColumns.find(a => a.id == id).label;
    }
}
DefineColumnMappingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: DefineColumnMappingComponent, deps: [{ token: i1.FormBuilder }, { token: i2.LoggerProviderImpl }], target: i0.ɵɵFactoryTarget.Component });
DefineColumnMappingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.12", type: DefineColumnMappingComponent, selector: "polp-define-column-mapping", inputs: { sourceColumns: "sourceColumns", targetColumns: "targetColumns", initValue: "initValue" }, usesInheritance: true, ngImport: i0, template: "<form  [formGroup]=\"form\">\n    <!-- Header -->\n    <div class=\"form-row mb-4\">\n        <div class=\"col-1\">\n            #\n        </div>\n        <div class=\"col-4\">\n            <b>Source</b>\n        </div>\n        <div class=\"col-3\">\n            <b>Example</b>\n        </div>\n        <div class=\"col-4\">\n            <b>Target</b>\n        </div>\n    </div>\n    \n    <ng-container formArrayName=\"mappings\">\n        <div class=\"form-row mb-4\" *ngFor=\"let f of mappings.controls; let i=index\">\n            <ng-container [formGroupName]=\"i\">\n                <div class=\"col-1\">\n                    {{i + 1}}\n                </div>\n                <div class=\"col-4\">\n                    <div [innerHtml]=\"sourceLabel(i) | safeDom:'html'\"></div>\n                </div>\n                <div class=\"col-3\">\n                    <!-- Something -->\n                </div>\n                <div class=\"col-4\">\n                    <select class=\"form-control form-control-sm\" formControlName=\"targetId\">\n                        <option value=\"\">...</option>                        \n                        <option *ngFor=\"let o of targetColumns\" [value]=\"o.id\">\n                            <span [innerHtml]=\"o.label | safeDom:'html'\">\n                            </span>\n                        </option>\n                    </select>\n                </div>\n            </ng-container>\n        </div>\n    </ng-container>                \n    \n</form>\n", styles: [""], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }], pipes: { "safeDom": i4.SafeDomPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: DefineColumnMappingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'polp-define-column-mapping', template: "<form  [formGroup]=\"form\">\n    <!-- Header -->\n    <div class=\"form-row mb-4\">\n        <div class=\"col-1\">\n            #\n        </div>\n        <div class=\"col-4\">\n            <b>Source</b>\n        </div>\n        <div class=\"col-3\">\n            <b>Example</b>\n        </div>\n        <div class=\"col-4\">\n            <b>Target</b>\n        </div>\n    </div>\n    \n    <ng-container formArrayName=\"mappings\">\n        <div class=\"form-row mb-4\" *ngFor=\"let f of mappings.controls; let i=index\">\n            <ng-container [formGroupName]=\"i\">\n                <div class=\"col-1\">\n                    {{i + 1}}\n                </div>\n                <div class=\"col-4\">\n                    <div [innerHtml]=\"sourceLabel(i) | safeDom:'html'\"></div>\n                </div>\n                <div class=\"col-3\">\n                    <!-- Something -->\n                </div>\n                <div class=\"col-4\">\n                    <select class=\"form-control form-control-sm\" formControlName=\"targetId\">\n                        <option value=\"\">...</option>                        \n                        <option *ngFor=\"let o of targetColumns\" [value]=\"o.id\">\n                            <span [innerHtml]=\"o.label | safeDom:'html'\">\n                            </span>\n                        </option>\n                    </select>\n                </div>\n            </ng-container>\n        </div>\n    </ng-container>                \n    \n</form>\n", styles: [""] }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.LoggerProviderImpl }]; }, propDecorators: { sourceColumns: [{
                type: Input
            }], targetColumns: [{
                type: Input
            }], initValue: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,