{"version":3,"file":"polpware-data-transport.mjs","sources":["../../../../projects/polpware/data-transport/src/lib/data-preview/data-preview.component.ts","../../../../projects/polpware/data-transport/src/lib/data-preview/data-preview.component.html","../../../../projects/polpware/data-transport/src/lib/data-processor/data-processor.component.ts","../../../../projects/polpware/data-transport/src/lib/data-processor/data-processor.component.html","../../../../projects/polpware/data-transport/src/lib/data-publication/data-publication.component.ts","../../../../projects/polpware/data-transport/src/lib/data-publication/data-publication.component.html","../../../../projects/polpware/data-transport/src/lib/data-staging/data-staging.component.ts","../../../../projects/polpware/data-transport/src/lib/data-staging/data-staging.component.html","../../../../projects/polpware/data-transport/src/lib/define-column-mapping/define-column-mapping.component.ts","../../../../projects/polpware/data-transport/src/lib/define-column-mapping/define-column-mapping.component.html","../../../../projects/polpware/data-transport/src/lib/drop-file-modal/drop-file-modal.component.ts","../../../../projects/polpware/data-transport/src/lib/drop-file-modal/drop-file-modal.component.html","../../../../projects/polpware/data-transport/src/lib/methods/file-ops.ts","../../../../projects/polpware/data-transport/src/lib/export-data-wizard/export-data-wizard.component.ts","../../../../projects/polpware/data-transport/src/lib/export-data-wizard/export-data-wizard.component.html","../../../../projects/polpware/data-transport/src/lib/export-wizard-modal/export-wizard-modal.component.ts","../../../../projects/polpware/data-transport/src/lib/export-wizard-modal/export-wizard-modal.component.html","../../../../projects/polpware/data-transport/src/lib/import-data-wizard/import-data-wizard.component.ts","../../../../projects/polpware/data-transport/src/lib/import-data-wizard/import-data-wizard.component.html","../../../../projects/polpware/data-transport/src/lib/import-wizard-modal/import-wizard-modal.component.ts","../../../../projects/polpware/data-transport/src/lib/import-wizard-modal/import-wizard-modal.component.html","../../../../projects/polpware/data-transport/src/lib/services/modal-utils.service.ts","../../../../projects/polpware/data-transport/src/lib/data-transport.module.ts","../../../../projects/polpware/data-transport/src/public-api.ts","../../../../projects/polpware/data-transport/src/polpware-data-transport.ts"],"sourcesContent":["import { Component, Input, OnChanges, OnInit, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\nimport { getInputType, IRowDataType, ITableColumnSpec, NgxDatatablePoweredBase } from '@polpware/ngx-reactive-table';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\n\n@Component({\n    selector: 'polp-data-preview',\n    templateUrl: './data-preview.component.html',\n    styleUrls: ['./data-preview.component.css']\n})\nexport class DataPreviewComponent extends NgxDatatablePoweredBase<IRowDataType>\n    implements OnInit, OnChanges {\n\n    @Input() initData: IRowDataType[] = [];\n    @Input() columnNames: { [key: string]: string } = {};\n\n    @ViewChild('datatable', { static: true }) datatable: DatatableComponent;\n\n    @ViewChild(\"titleCell \", { static: true }) titleCellTmpl: TemplateRef<any>;\n\n    constructor() {\n        super();\n    }\n\n    ngOnInit(): void {\n        this.settings = Object.assign({}, this.settings, { pageSize: 10, editable: true });\n        this.pageSize = this.settings.pageSize;\n\n        this.buildColumns();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.initData && !changes.initData.firstChange && changes.initData.currentValue) {\n            this.buildColumns();\n        }\n    }\n\n    buildColumns() {\n\n        if (!this.initData || this.initData.length <= 0) {\n            return;\n        }\n\n        const columns: Array<ITableColumnSpec> = [];\n        const firstRow = this.initData[0];\n        for (let prop in this.columnNames) {\n            const c: ITableColumnSpec = {\n                name: this.columnNames[prop],\n                prop: prop,\n                sortable: true,\n                minWidth: 150,\n                editable: true,\n                inputType: getInputType(firstRow[prop]),\n                headerTemplate: this.titleCellTmpl\n            };\n            columns.push(c);\n        }\n\n        this.columns = columns;\n        this.rows = this.initData;\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-body\">\n        <ngx-datatable class=\"bootstrap\" #datatable\n                       [rows]=\"rows\"\n                       [columns]=\"columns\"\n                       [columnMode]=\"ColumnMode.force\"\n                       headerHeight=\"auto\"\n                       [footerHeight]=\"50\"\n                       rowHeight=\"auto\"\n                       [limit]=\"pageSize\"\n                       [scrollbarH]=\"true\">\n        </ngx-datatable>\n\n        <ng-template #titleHeader let-column=\"column\">\n            <div [innerHTML]=\"column.name\" class=\"fw-bold text-wrap\"></div>\n        </ng-template>\n    </div>\n</div>\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\nimport { faCheck, faEdit, faExclamationTriangle, faPlus, faSearch, faTimes, faTrash, faUndo } from '@fortawesome/free-solid-svg-icons';\nimport { SearchBoxWidgetComponent } from '@polpware/bs-components';\nimport { NgxNotyImpl } from '@polpware/ngx-noty';\nimport { getInputType, IRowDataType, ITableColumnSpec, ITableDataChangeEvent, NgxDatatableLocalData, supportOperationsDecorator } from '@polpware/ngx-reactive-table';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport { LogMessage } from 'ngx-log-monitor';\nimport { ReplaySubject } from 'rxjs';\n\n@supportOperationsDecorator\n@Component({\n    selector: 'polp-data-processor',\n    templateUrl: './data-processor.component.html',\n    styleUrls: ['./data-processor.component.css']\n})\nexport class DataProcessorComponent extends NgxDatatableLocalData<IRowDataType>\n    implements OnInit, OnChanges, OnDestroy {\n\n    @Input() initData: IRowDataType[] = [];\n    @Input() columnNames: { [key: string]: string } = {};\n    @Output() dataChange = new EventEmitter<ITableDataChangeEvent>();\n    @Output() onReset = new EventEmitter<void>();\n\n    @ViewChild('searchBox', { static: true }) searchBox: SearchBoxWidgetComponent;\n    @ViewChild('datatable', { static: true }) datatable: DatatableComponent;\n\n    @ViewChild(\"editActionHeader\", { static: true }) editActionHeaderTmpl: TemplateRef<any>;\n    @ViewChild(\"editActionCell \", { static: true }) editActionCellTmpl: TemplateRef<any>;\n    @ViewChild(\"inputCell \", { static: true }) inputCellTmpl: TemplateRef<any>;\n\n    // Support operations over data\n    faEdit = faEdit;\n    faTrash = faTrash;\n    faCheck = faCheck;\n    faTimes = faTimes;\n    faPlus = faPlus;\n    faUndo = faUndo;\n    faExclamationTriangle = faExclamationTriangle;\n    faSearch = faSearch;\n\n    isConfirmReset = false;\n    // Used to keep the original rows \n    originalRows: IRowDataType[] = [];\n\n    showLogs = false;\n    logStream = new ReplaySubject<LogMessage>();\n\n    constructor(public readonly noty: NgxNotyImpl) {\n        super();\n    }\n\n    get editable() {\n        return this.settings ? (this.settings.canCreate || this.settings.canDelete || this.settings.canUpdate) : false;\n    }\n\n    ngOnInit(): void {\n        this.settings = Object.assign({}, this.settings, { pageSize: 10, canCreate: true, canUpdate: true, canDelete: true });\n        this.pageSize = this.settings.pageSize;\n\n        this.buildColumns();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.initData && !changes.initData.firstChange && changes.initData.currentValue) {\n            this.buildColumns();\n        }\n    }\n\n    ngOnDestroy(): void {\n    }\n\n    // Starts a new round of search\n    //\n    // This operation causes new network request.\n    public kickOffSearch() {\n        const k = this.searchBox.effectiveKeyword;\n        if (k) {\n            this.rows = this.originalRows.filter(elem => {\n                for (let prop in elem) {\n                    if (prop != 'id' && elem.hasOwnProperty(prop)) {\n                        const v = elem[prop];\n                        if (v) {\n                            const w: string = v.toString().toLowerCase();\n                            if (w.includes(k)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                return false;\n            });\n        } else {\n            this.rows = this.originalRows;\n        }\n    }\n\n\n    buildColumns() {\n\n        if (!this.initData || this.initData.length <= 0) {\n            return;\n        }\n\n        const columns: Array<ITableColumnSpec> = [];\n        columns.push({\n            width: 50,\n            sortable: false,\n            canAutoResize: false,\n            draggable: false,\n            resizeable: false,\n            headerCheckboxable: true,\n            checkboxable: true\n        });\n        columns.push({\n            name: 'Actions',\n            width: 120,\n            sortable: false,\n            canAutoResize: false,\n            draggable: false,\n            resizeable: false,\n            headerTemplate: this.editActionHeaderTmpl,\n            cellTemplate: this.editActionCellTmpl\n        });\n\n        const firstRow = this.initData[0];\n        for (let prop in this.columnNames) {\n            const c: ITableColumnSpec = {\n                name: this.columnNames[prop],\n                prop: prop,\n                sortable: true,\n                minWidth: 150,\n                editable: true,\n                inputType: getInputType(firstRow[prop]),\n                cellTemplate: this.inputCellTmpl\n            };\n            columns.push(c);\n        }\n\n        this.columns = columns;\n        this.originalRows = [...this.initData];\n        this.rows = [...this.initData];\n        this.searchBox && this.searchBox.searchControl && this.searchBox.resetKeyword(false);\n    }\n\n    reset() {\n        this.onReset.emit();\n\n        this.logStream.next({\n            type: 'INFO',\n            message: `reset record(s)`\n        });\n        this.showLogs = true;\n    }\n\n    // Override\n    publish(event: ITableDataChangeEvent) {\n        if (event.op == 'create') {\n            // Add \n            const data = event.data as IRowDataType;\n            this.originalRows.push(data);\n\n            this.logStream.next({\n                type: 'INFO',\n                message: `Created a new record`\n            });\n            this.showLogs = true;\n\n        } else if (event.op == 'update') {\n            // Add or edit\n            // We do not need to preserve value semantics;\n            // therefore, we can do in-place editing.\n            const data = event.data as IRowDataType;\n            const index = this.originalRows.findIndex(a => a.id == data.id);\n            if (index != -1) {\n                this.originalRows.splice(index, 1, data);\n                this.logStream.next({\n                    type: 'INFO',\n                    message: `Updated a record`\n                });\n                this.showLogs = true;\n            }\n        } else if (event.op == 'delete') {\n            // Remove\n            const data = event.data as IRowDataType[];\n            this.originalRows = this.originalRows.filter(a => {\n                return !data.some(b => b.id == a.id);\n            });\n\n            this.logStream.next({\n                type: 'INFO',\n                message: `removed ${data.length} record(s)`\n            });\n            this.showLogs = true;\n        }\n        // Notify client \n        this.dataChange.emit(Object.assign({}, event, { rows: this.originalRows }));\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-body\">\n\n        <div class=\"btn-toolbar mb-4\" role=\"toolbar\" aria-label=\"Operations\" *ngIf=\"editable\">\n            <div class=\"btn-group me-2\" role=\"group\" aria-label=\"Update\">\n                <button class=\"btn btn-success\" role=\"button\" *ngIf=\"settings.canCreate\"\n                        (click)=\"startAdd()\" [disabled]=\"selected.length > 0 || anyEditing\">\n                    <fa-icon [icon]=\"faPlus\" class=\"me-1\"></fa-icon>\n                    Add\n                </button>\n                <button class=\"btn btn-danger\" role=\"button\" *ngIf=\"settings.canDelete\"\n                        (click)=\"rmAsync()\" [disabled]=\"selected.length <= 0\">\n                    <fa-icon [icon]=\"faTrash\" class=\"me-1\"></fa-icon>\n                    Delete\n                </button>\n            </div>\n            <div class=\"btn-group me-2\" role=\"group\" aria-label=\"Reset\">\n                <button class=\"btn btn-warning\" role=\"button\" (click)=\"isConfirmReset = true;\"\n                        [popover]=\"confirmResetTmpl\" triggers=\"\" [isOpen]=\"isConfirmReset\"\n                        container=\"body\" popoverTitle=\"Warning\"\n                        [disabled]=\"selected.length > 0 || anyEditing\">\n                    <fa-icon [icon]=\"faUndo\" class=\"me-1\"></fa-icon>\n                    Reset\n                </button>\n            </div>\n            <ng-template #confirmResetTmpl>\n                <div class=\"alert alert-warning\">\n                    This operation will discard all changes and cannot be undo. Are you sure to continue?\n                </div>\n                <div>\n                    <button class=\"btn btn-info me-2\" role=\"button\" (click)=\"isConfirmReset = false;\">\n                        <fa-icon [icon]=\"faTimes\" class=\"me-1\"></fa-icon>\n                        Cancel\n                    </button>\n                    <button class=\"btn btn-warning\" role=\"button\" (click)=\"isConfirmReset=false;reset();\">\n                        <fa-icon [icon]=\"faExclamationTriangle\" class=\"me-1\"></fa-icon>\n                        Confirm\n                    </button>\n                </div>\n            </ng-template>\n        </div>\n\n        <polp-bs-expandable-card [isCollapsed]=\"!showLogs\">\n            <span title>\n                Operation logs\n            </span>\n            <div class=\"container\" body>\n                <log-monitor\n                    [logStream]=\"logStream\"\n                    theme=\"dark\"\n                    title=\"Logs\"\n                    [animated]=\"true\"\n                    [icons]=\"true\">\n                </log-monitor>\n            </div>\n        </polp-bs-expandable-card>\n\n        <polp-bs-search-box-widget #searchBox\n                                   [debounceTime]=\"200\"\n                                   [minLength]=\"2\"\n                                   formClass=\"border rounded my-2 py-4 px-4 bg-light\"\n                                   (onSearch)=\"kickOffSearch()\">\n        </polp-bs-search-box-widget>\n\n        <ngx-datatable #datatable\n            class=\"bootstrap\"\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [columnMode]=\"ColumnMode.force\"\n            headerHeight=\"auto\"\n            [footerHeight]=\"50\"\n            rowHeight=\"auto\"\n            [limit]=\"pageSize\"\n            [scrollbarH]=\"true\"\n            [selected]=\"selected\"\n            [selectionType]=\"SelectionType.checkbox\"\n            [selectAllRowsOnPage]=\"false\"\n            (select)=\"onSelect($event)\">\n        </ngx-datatable>\n\n        <ng-template #titleHeader let-column=\"column\">\n            <div [innerHTML]=\"column.name\" class=\"fw-bold text-wrap\"></div>\n        </ng-template>\n\n        <ng-template #inputCell let-rowIndex=\"rowIndex\" let-row=\"row\" let-column=\"column\" let-value=\"value\">\n            <span *ngIf=\"!editing[rowIndex + '-' + column.prop]\" [innerHTML]=\"value\">\n            </span>\n            <input autofocus\n                   *ngIf=\"editing[rowIndex + '-' + column.prop]\"\n                   [type]=\"column.inputType\"\n                   [value]=\"value\"\n                   (blur)=\"updateValue($event, column.prop, rowIndex)\"\n            />            \n        </ng-template>\n\n        <ng-template #editActionHeader>\n            <span>\n                Actions\n            </span>\n        </ng-template>\n\n        <ng-template #editActionCell let-rowIndex=\"rowIndex\">\n            <button class=\"btn btn-outline-primary icon-only\" role=\"button\" (click)=\"startEdit(rowIndex)\"\n                    *ngIf=\"!backup[rowIndex]; else otherActionTmpl\">\n                <fa-icon [icon]=\"faEdit\"></fa-icon>\n            </button>\n            <ng-template #otherActionTmpl>\n                <button class=\"btn btn-outline-primary icon-only\" role=\"button\" (click)=\"confirmEditAsync(rowIndex)\">\n                    <fa-icon [icon]=\"faCheck\"></fa-icon>\n                </button>\n                <button class=\"btn btn-outline-warning icon-only\" role=\"button\" (click)=\"cancelEdit(rowIndex)\">\n                    <fa-icon [icon]=\"faTimes\"></fa-icon>\n                </button>\n            </ng-template>\n        </ng-template>\n    </div>\n</div>\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { faArrowCircleUp, faArrowUp, faCheck, faHourglass, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { SearchBoxWidgetComponent } from '@polpware/bs-components';\nimport { NgxNotyImpl } from '@polpware/ngx-noty';\nimport { getInputType, IRowDataType, ITableColumnSpec, ITableDataChangeEvent, NgxDatatableLocalData, sliceArray, supportOperationsDecorator } from '@polpware/ngx-reactive-table';\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\nimport { LogMessage } from 'ngx-log-monitor';\nimport { ReplaySubject } from 'rxjs';\n\ninterface IPubRowType extends IRowDataType {\n    _state: 'waiting' | 'working' | 'success' | 'failure';\n}\n\n@supportOperationsDecorator\n@Component({\n    selector: 'polp-data-publication',\n    templateUrl: './data-publication.component.html',\n    styleUrls: ['./data-publication.component.css']\n})\nexport class DataPublicationComponent extends NgxDatatableLocalData<IPubRowType>\n    implements OnInit, OnDestroy {\n\n    @Input() initData: IRowDataType[] = [];\n    @Input() columnNames: { [key: string]: string } = {};\n    @Input() uploadAsync: (data: Array<IRowDataType>) => Promise<{\n        failures: Array<IRowDataType>;\n        errors: Array<string>;\n    }> = (data: Array<IRowDataType>) => {\n        return new Promise(function(resolve, reject) {\n            resolve({\n                failures: [],\n                errors: []\n            });\n        });\n    };\n    @Output() onImport = new EventEmitter<void>();\n    @Output() afterImport = new EventEmitter<{ success: number; failure: number }>();\n\n    faCheck = faCheck;\n    faTimes = faTimes;\n    faHourglass = faHourglass;\n    faArrowCircleUp = faArrowCircleUp;\n    faArrowUp = faArrowUp;\n\n    // Used to keep the original rows \n    originalRows: IPubRowType[] = [];\n\n    showLogs = false;\n    logStream = new ReplaySubject<LogMessage>();\n\n    @ViewChild('searchBox4DataPub', { static: true }) searchBox: SearchBoxWidgetComponent;\n\n    @ViewChild('datatable', { static: true }) datatable: DatatableComponent;\n\n    @ViewChild(\"stateHeader\", { static: true }) stateHeaderTmpl: TemplateRef<any>;\n    @ViewChild(\"stateCell \", { static: true }) stateCellTmpl: TemplateRef<any>;\n    @ViewChild(\"titleCell \", { static: true }) titleCellTmpl: TemplateRef<any>;\n    @ViewChild(\"inputCell \", { static: true }) inputCellTmpl: TemplateRef<any>;\n\n    private _importStat: { success: number; failure: number } = { success: 0, failure: 0 };\n\n    constructor(public readonly noty: NgxNotyImpl) {\n        super();\n    }\n\n    get anyKeyword() {\n        return this.searchBox ? this.searchBox.effectiveKeyword : '';\n    }\n\n    ngOnInit(): void {\n        this.settings = Object.assign({}, this.settings, { pageSize: 10, canCreate: true, canDelete: true, canUpdate: true });\n        this.pageSize = this.settings.pageSize;\n        this.buildColumns();\n    }\n\n    ngOnDestroy(): void {\n    }\n\n    // Starts a new round of search\n    //\n    // This operation causes new network request.\n    public kickOffSearch() {\n        const k = this.searchBox.effectiveKeyword;\n        if (k) {\n            this.rows = this.originalRows.filter(elem => {\n                for (let prop in elem) {\n                    if (prop != 'id' && elem.hasOwnProperty(prop)) {\n                        const v = elem[prop];\n                        if (v) {\n                            const w: string = v.toString().toLowerCase();\n                            if (w.includes(k)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                return false;\n            });\n        } else {\n            this.rows = this.originalRows;\n        }\n    }\n\n    buildColumns() {\n\n        if (!this.initData || this.initData.length <= 0) {\n            return;\n        }\n\n        const columns: Array<ITableColumnSpec> = [];\n        columns.push({\n            width: 50,\n            sortable: false,\n            canAutoResize: false,\n            draggable: false,\n            resizeable: false,\n            headerCheckboxable: true,\n            checkboxable: true\n        });\n        columns.push({\n            name: 'State',\n            prop: '_state',\n            width: 80,\n            sortable: false,\n            canAutoResize: false,\n            draggable: false,\n            resizeable: false,\n            headerTemplate: this.stateHeaderTmpl,\n            cellTemplate: this.stateCellTmpl\n        });\n\n        const firstRow = this.initData[0];\n        for (let prop in this.columnNames) {\n            const c: ITableColumnSpec = {\n                name: this.columnNames[prop],\n                prop: prop,\n                sortable: true,\n                minWidth: 150,\n                editable: true,\n                inputType: getInputType(firstRow[prop]),\n                headerTemplate: this.titleCellTmpl,\n                cellTemplate: this.inputCellTmpl\n            };\n            columns.push(c);\n        }\n\n        this.columns = columns;\n        this.originalRows = this.initData.map(a => {\n            return Object.assign({ _state: 'waiting' }, a) as IPubRowType;\n        });\n        this.rows = this.originalRows;\n        this.searchBox && this.searchBox.searchControl && this.searchBox.resetKeyword(false);\n    }\n\n    // Override\n    publish(event: ITableDataChangeEvent) {\n        if (event.op == 'create') {\n            // Add \n            const data = event.data as IPubRowType;\n            this.originalRows.push(data);\n        } else if (event.op == 'update') {\n            // Add or edit\n            // We do not need to preserve value semantics;\n            // therefore, we can do in-place editing.\n            const data = event.data as IPubRowType;\n            const index = this.originalRows.findIndex(a => a.id == data.id);\n            if (index != -1) {\n                this.originalRows.splice(index, 1, data);\n            }\n        } else if (event.op == 'delete') {\n            // Remove\n            const data = event.data as IPubRowType[];\n            this.originalRows = this.originalRows.filter(a => {\n                return !data.some(b => b.id == a.id);\n            });\n        }\n    }\n\n    async uploadSelectedAsync() {\n        // Emit a message \n        this.onImport.emit();\n        const todo = this.selected.filter(a => a._state != 'success');\n        this.logStream.next({\n            type: 'INFO',\n            message: `Start to import the selected records (${todo.length})`\n        });\n        const noError = await this.invokeUploadAsync(todo);\n\n        if (noError) {\n            this.logStream.next({\n                type: 'SUCCESS',\n                message: 'Successfully uploaded the selected records'\n            });\n        }\n        this.showLogs = true;\n    }\n\n    // This will work for filter set or all.\n    async uploadAllAsync() {\n        // Emit a message \n        this.onImport.emit();\n        // Page by page\n        const internalRows = this.datatable._internalRows;\n        const totalPages = Math.ceil(internalRows.length / this.pageSize);\n        let noError = true;\n        // Disable sorting but preserve the current order\n        this.datatable.sorts = [];\n        this.datatable.rows = internalRows;\n\n        this.logStream.next({\n            type: 'INFO',\n            message: `Start to import all records`\n        });\n\n        for (let pIndex = 0; (noError && pIndex < totalPages); pIndex++) {\n\n            this.logStream.next({\n                type: 'INFO',\n                message: `Import ${pIndex + 1} page`\n            });\n\n            this.datatable._offset = pIndex;\n            // One page \n            let todo = sliceArray(internalRows, pIndex * this.pageSize, (pIndex + 1) * this.pageSize);\n            todo = todo.filter(a => a._state != 'success');\n            noError = await this.invokeUploadAsync(todo);\n        }\n\n        if (noError) {\n            this.logStream.next({\n                type: 'SUCCESS',\n                message: 'Successfully uploaded all records'\n            });\n        }\n\n        this.showLogs = true;\n    }\n\n    // We expect that the underlying upload method is working in a transactional way.\n    // I.e., either all the data is uploaded or none of them is uploaded.\n    async invokeUploadAsync(data: Array<IPubRowType>) {\n        let noError = true;\n        try {\n            data.forEach(elem => elem._state = 'working');\n            // Trigger value semantics\n            this.rows = [...this.rows];\n            // Update state \n            // Start with the first page and then move on\n            const ret = await this.uploadAsync(data);\n            // todo: Error handling\n            data.forEach(elem => elem._state = 'success');\n            ret.failures.forEach(p => {\n                const q = data.find(x => x.id == p.id);\n                q && (q._state = 'failure');\n            });\n            // Force to change             \n            this.rows = [...this.rows];\n\n            this.logStream.next({\n                type: 'SUCCESS',\n                message: `Imported ${data.length - ret.failures.length} records`\n            });\n\n            if (ret.failures && ret.failures.length) {\n                noError = false;\n                this.logStream.next({\n                    type: 'ERR',\n                    message: `Failed to import ${ret.failures.length} records`\n                });\n            }\n\n            if (ret.errors && ret.errors.length) {\n                ret.errors.forEach(e => {\n                    this.logStream.next({\n                        type: 'ERR',\n                        message: `Error: ${e}`\n                    });\n                });\n            }\n\n            this._importStat.success += (data.length - ret.failures.length);\n            this._importStat.failure += ret.failures.length;\n\n            this.afterImport.emit(this._importStat);\n\n        } catch (e) {\n            // In place editing\n            data.forEach(elem => elem._state = 'failure');\n            // Force to change \n            this.rows = [...this.rows];\n            noError = false;\n        }\n        return noError;\n    }\n}\n","<div class=\"card\">\n    <div class=\"card-body\">\n\n        <div class=\"btn-toolbar mb-4\" role=\"toolbar\" aria-label=\"Operations\">\n            <div class=\"btn-group me-2\" role=\"group\" aria-label=\"Upload\">\n                <button class=\"btn btn-success\" role=\"button\" (click)=\"uploadSelectedAsync()\" [disabled]=\"selected.length <= 0\">\n                    <fa-icon [icon]=\"faArrowUp\" class=\"me-1\"></fa-icon>\n                    Upload selected\n                </button>\n                <button class=\"btn btn-info\" role=\"button\" (click)=\"uploadAllAsync()\" [disabled]=\"anyKeyword\">\n                    <fa-icon [icon]=\"faArrowCircleUp\" class=\"me-1\"></fa-icon>\n                    Upload all\n                </button>\n                <button class=\"btn btn-warning\" role=\"button\" (click)=\"uploadAllAsync()\" [disabled]=\"!anyKeyword\">\n                    <fa-icon [icon]=\"faArrowCircleUp\" class=\"me-1\"></fa-icon>\n                    Upload filtered\n                </button>\n            </div>\n        </div>\n\n        <polp-bs-expandable-card [isCollapsed]=\"!showLogs\">\n            <span title>\n                Data import logs\n            </span>\n            <div class=\"container\" body>\n                <log-monitor\n                    [logStream]=\"logStream\"\n                    theme=\"dark\"\n                    title=\"logs\"\n                    [animated]=\"true\"\n                    [icons]=\"true\">\n                </log-monitor>\n            </div>\n        </polp-bs-expandable-card>\n\n        <polp-bs-search-box-widget #searchBox4DataPub\n                                   [debounceTime]=\"200\"\n                                   [minLength]=\"2\"\n                                   formClass=\"border rounded my-2 py-4 px-4 bg-light\"\n                                   (onSearch)=\"kickOffSearch()\">\n        </polp-bs-search-box-widget>\n                    \n        <ngx-datatable #datatable\n            class=\"bootstrap\"\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [columnMode]=\"ColumnMode.force\"\n            headerHeight=\"auto\"\n            [footerHeight]=\"50\"\n            rowHeight=\"auto\"\n            [limit]=\"pageSize\"\n            [scrollbarH]=\"true\"\n            [selected]=\"selected\"\n            [selectionType]=\"SelectionType.checkbox\"\n            [selectAllRowsOnPage]=\"true\"\n            (select)=\"onSelect($event)\">\n        </ngx-datatable>\n\n        <ng-template #titleHeader let-column=\"column\">\n            <div [innerHTML]=\"column.name\" class=\"fw-bold text-wrap\"></div>\n        </ng-template>\n\n        <ng-template #inputCell let-rowIndex=\"rowIndex\" let-row=\"row\" let-column=\"column\" let-value=\"value\">\n            <span *ngIf=\"!editing[rowIndex + '-' + column.prop]\" [innerHTML]=\"value\">\n            </span>\n            <input autofocus\n                   *ngIf=\"editing[rowIndex + '-' + column.prop]\"\n                   [type]=\"column.inputType\"\n                   [value]=\"value\"\n                   (blur)=\"updateValue($event, column.prop, rowIndex)\"\n            />            \n        </ng-template>\n\n        <ng-template #stateHeader let-column=\"column\">\n            <span class=\"fw-bold text-warp\">\n                State\n            </span>\n        </ng-template>\n\n        <ng-template #stateCell let-value=\"value\">\n            <ng-container [ngSwitch]=\"value\">\n                <span class=\"text-info\" *ngSwitchCase=\"'waiting'\">\n                    <fa-icon [icon]=\"faHourglass\">\n                    </fa-icon>\n                </span>\n                <span class=\"text-info\" *ngSwitchCase=\"'working'\">\n                    <fa-icon [icon]=\"faHourglass\" [spin]=\"true\">\n                    </fa-icon>\n                </span>\n                <span class=\"text-success\" *ngSwitchCase=\"'success'\">\n                    <fa-icon [icon]=\"faCheck\" >\n                    </fa-icon>\n                </span>\n                <span class=\"text-danger\" *ngSwitchCase=\"'failure'\">\n                    <fa-icon [icon]=\"faTimes\">\n                    </fa-icon>\n                </span>\n            </ng-container>\n        </ng-template>\n    </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'polp-data-staging',\n  templateUrl: './data-staging.component.html',\n  styleUrls: ['./data-staging.component.css']\n})\nexport class DataStagingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>data-staging works!</p>\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, ValidationErrors } from '@angular/forms';\nimport { DefaultFormBaseComponent } from '@polpware/ngx-form-common';\nimport { INgxLogger, LoggerProviderImpl } from '@polpware/ngx-logger';\nimport { Subscription } from 'rxjs';\n\nfunction findFirstDuplicate(array: string[]) {\n    var valuesSoFar: { [key: string]: boolean } = Object.create(null);\n    for (let i = 0; i < array.length; ++i) {\n        const value = array[i];\n        if (value in valuesSoFar) {\n            return value;\n        }\n        valuesSoFar[value] = true;\n    }\n    return '';\n}\n\nfunction makeFormValidator(targetColumns: Array<{\n    label: string;\n    id: string;\n    required: boolean;\n}>) {\n    return (control: FormGroup): ValidationErrors | null => {\n        // Make sure that\n        const mappings = control.get('mappings') as FormArray;\n        const subset = mappings.controls.filter((x: FormGroup) => {\n            const checked = x.get('targetId');\n            return !!checked.value;\n        });\n        const targetIds = subset.map((y: FormGroup) => {\n            return y.get('targetId').value;\n        });\n\n        // Check redundancy\n        const anyDuplicate = findFirstDuplicate(targetIds);\n        if (anyDuplicate) {\n            const desc = targetColumns.find(a => a.id == anyDuplicate);\n            return {\n                duplicate: `${desc?.label}(${desc?.id})`\n            }\n        }\n        // Check if all required are included.\n        const anyMissing = targetColumns\n            .filter(a => a.required)\n            .find(b => !targetIds.some(c => c == b.id));\n        if (anyMissing) {\n            return {\n                missing: `${anyMissing.label}(${anyMissing.id})`\n            }\n        }\n\n        return null;\n    };\n}\n\n\n@Component({\n    selector: 'polp-define-column-mapping',\n    templateUrl: './define-column-mapping.component.html',\n    styleUrls: ['./define-column-mapping.component.css']\n})\nexport class DefineColumnMappingComponent extends DefaultFormBaseComponent\n    implements OnInit, OnDestroy {\n\n    @Input() sourceColumns: Array<{\n        label: string;\n        id: string;\n    }> = [];\n    @Input() targetColumns: Array<{\n        label: string;\n        id: string;\n        required: boolean;\n    }> = [];\n    @Input() initValue: Array<{\n        sourceId: string;\n        targetId: string;\n    }> = [];\n\n    form: FormGroup;\n\n    private _subr: Subscription;\n    private readonly _logger: INgxLogger;\n\n    constructor(private readonly _builder: FormBuilder,\n        loggerProvider: LoggerProviderImpl) {\n        super();\n\n        this._logger = loggerProvider.logger('polp_data_transport_define_column_mapping');\n\n    }\n\n    get mappings() {\n        return this.form.get('mappings') as FormArray;\n    }\n\n    ngOnInit(): void {\n        // Build form\n        this.form = this._builder.group({\n            mappings: this._builder.array([])\n        }, { validators: [makeFormValidator(this.targetColumns)] });\n\n        this._subr = this.form.valueChanges.subscribe(a => {\n            const b = a.mappings as Array<{ checked: boolean; sourceId: string; targetId: string }>;\n            const c = b.filter(b => b.targetId);\n            this.onValueChanged.emit(c);\n            this.onValidation.emit(this.form.errors);\n        });\n        this.sourceColumns.forEach(source => {\n            // Build mapping entries\n            const record = {\n                checked: false,\n                sourceId: source.id,\n                targetId: ''\n            };\n\n            const anyMap = this.initValue.find(x => x.sourceId == source.id);\n            if (anyMap) {\n                record.targetId = anyMap.targetId;\n            }\n\n            this.mappings.push(this._builder.group(record));\n        });\n    }\n\n    ngOnDestroy() {\n        this._subr && this._subr.unsubscribe();\n    }\n\n    sourceLabel(i: number) {\n        const id = this.mappings.controls[i].value.sourceId;\n        return this.sourceColumns.find(a => a.id == id).label;\n    }\n\n}\n","<form  [formGroup]=\"form\">\n    <!-- Header -->\n    <div class=\"form-row mb-4\">\n        <div class=\"col-1\">\n            #\n        </div>\n        <div class=\"col-4\">\n            <b>Source</b>\n        </div>\n        <div class=\"col-3\">\n            <b>Example</b>\n        </div>\n        <div class=\"col-4\">\n            <b>Target</b>\n        </div>\n    </div>\n    \n    <ng-container formArrayName=\"mappings\">\n        <div class=\"form-row mb-4\" *ngFor=\"let f of mappings.controls; let i=index\">\n            <ng-container [formGroupName]=\"i\">\n                <div class=\"col-1\">\n                    {{i + 1}}\n                </div>\n                <div class=\"col-4\">\n                    <div [innerHtml]=\"sourceLabel(i) | safeDom:'html'\"></div>\n                </div>\n                <div class=\"col-3\">\n                    <!-- Something -->\n                </div>\n                <div class=\"col-4\">\n                    <select class=\"form-control form-control-sm\" formControlName=\"targetId\">\n                        <option value=\"\">...</option>                        \n                        <option *ngFor=\"let o of targetColumns\" [value]=\"o.id\">\n                            <span [innerHtml]=\"o.label | safeDom:'html'\">\n                            </span>\n                        </option>\n                    </select>\n                </div>\n            </ng-container>\n        </div>\n    </ng-container>                \n    \n</form>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ObservableModalAbstractComponent } from '@polpware/bs-components';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\n\n// todo: Configuration \nexport interface IModalInput {\n    multiple?: boolean;\n    accept?: string;\n    maxFileSizeInBytes?: number; // byets\n}\n\n@Component({\n    selector: 'polp-drop-file-modal',\n    templateUrl: './drop-file-modal.component.html',\n    styleUrls: ['./drop-file-modal.component.css']\n})\nexport class DropFileModalComponent\n    extends ObservableModalAbstractComponent<IModalInput, File[]>\n    implements OnInit {\n\n    faSave = faSave;\n\n    items: File[] = [];\n    valid: boolean = false;\n    title = 'Select a file';\n\n    @Input()\n    multiple: boolean = false;\n    @Input()\n    accept: string = '*';\n    @Input()\n    maxFileSizeInBytes: number = undefined;\n\n    constructor(\n        public readonly bsModalRef: BsModalRef,\n        protected readonly bsModalService: BsModalService\n    ) {\n        super();\n    }\n\n    ngOnInit(): void {\n    }\n\n    onSelect(event: { addedFiles: File[] }) {\n        this.items.push(...event.addedFiles);\n        this.valid = true;\n    }\n\n    onRemove(event: File) {\n        this.items.splice(this.items.indexOf(event), 1);\n        this.valid = false;\n    }\n\n    confirm() {\n        this.closeModal(this.items);\n    }\n\n    close() {\n        this.closeModal(null);\n    }\n\n}\n","<div class=\"modal-header\" polpModalDraggable>\n    <h4 class=\"modal-title\">{{title}}</h4>\n    <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"close()\">\n    </button>\n</div>\n<div class=\"modal-body\">\n    <ngx-dropzone [multiple]=\"multiple\"\n                  [accept]=\"accept\"\n                  [maxFileSize]=\"maxFileSizeInBytes\"\n                  (change)=\"onSelect($event)\">        \n        <ngx-dropzone-label>Drop a file</ngx-dropzone-label>\n        <ngx-dropzone-preview *ngFor=\"let f of items\" [removable]=\"true\" (removed)=\"onRemove(f)\">\n\t    <ngx-dropzone-label>{{ f.name }} ({{ f.type }})</ngx-dropzone-label>\n        </ngx-dropzone-preview>\n    </ngx-dropzone>\n</div>\n\n<div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"close()\">Cancel</button>\n    <button class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!valid\">\n        <fa-icon [icon]=\"faSave\" class=\"me-1\"></fa-icon> <span>Confirm</span>\n    </button>\n</div>\n","import readXlsxFile from 'read-excel-file';\r\nimport writeXlsxFile from 'write-excel-file';\r\nimport { ExcelOutputRowType, ExcelOutputSheetSchema } from '../interfaces/excel-io.interface';\r\n\r\nexport function readExcelAsync(file: File) {\r\n    return readXlsxFile(file);\r\n}\r\n\r\nexport function writeExcelAsync(data: Array<ExcelOutputRowType>, options: {\r\n    schema: ExcelOutputSheetSchema,\r\n    fileName: string\r\n}) {\r\n    return writeXlsxFile(data, {\r\n        schema: options.schema,\r\n        fileName: options.fileName\r\n    });\r\n}\r\n\r\n","import { Component, Input, OnInit } from '@angular/core';\nimport { faArrowLeft, faArrowRight, faCheck, faChevronRight, faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { safeParseBool } from '@polpware/fe-utilities';\nimport { WizardAbstractComponent } from '@polpware/ngx-wizard';\nimport { LogMessage } from 'ngx-log-monitor';\nimport { ReplaySubject } from 'rxjs';\nimport { DownloadFuncType, IDownloadInput, IExcelOutputColumnSchema } from '../interfaces/excel-io.interface';\nimport { writeExcelAsync } from '../methods/file-ops';\n\ninterface IWizardState {\n    preview: {\n        cols: { [key: string]: string };\n        rows: Array<any>;\n        totalCount: number;\n    };\n}\n\nfunction makeColumnSchema(data: {\n    name: string;\n    inputType: 'text' | 'tel' | 'email' | 'date' | 'number' | 'checkbox' | 'file';\n    prop: string;\n}): IExcelOutputColumnSchema<any> {\n    if (data.inputType == 'date') {\n        // todo: Maybe simplify as a string\n        return {\n            column: data.name,\n            type: Date,\n            format: 'dd/mm/yyyy hh:mm AM/PM',\n            value: (a) => new Date(a[data.prop])\n        };\n    } else if (data.inputType == 'number') {\n        return {\n            column: data.name,\n            type: Number,\n            value: (a) => Number(a[data.prop])\n        };\n    } else if (data.inputType == 'checkbox') {\n        return {\n            column: data.name,\n            type: Boolean,\n            value: (a) => safeParseBool(a[data.prop])\n        };\n    } else {\n        return {\n            column: data.name,\n            type: String,\n            value: (a) => a[data.prop]\n        };\n    }\n}\n\n// We on purpose extends from the abstract wizard,\n// to allow for extensibility in the future.\n@Component({\n    selector: 'polp-export-data-wizard',\n    templateUrl: './export-data-wizard.component.html',\n    styleUrls: ['./export-data-wizard.component.css']\n})\nexport class ExportDataWizardComponent\n    extends WizardAbstractComponent implements OnInit {\n\n    faChevronRight = faChevronRight;\n    faArrowLeft = faArrowLeft;\n    faArrowRight = faArrowRight;\n    faSpinner = faSpinner;\n    faCheck = faCheck;\n\n    @Input() columns: Array<{\n        name: string;\n        inputType: 'text' | 'tel' | 'email' | 'date' | 'number' | 'checkbox' | 'file';\n        prop: string;\n    }> = [];\n    @Input() downloadAsync: DownloadFuncType = (_: IDownloadInput) => {\n        return new Promise(function(resolve, reject) {\n            resolve({\n                totalCount: 0,\n                items: []\n            });\n        });\n    };\n\n    state: IWizardState;\n\n    // First step: preview\n    // Optional second step: configuration \n    // Progress bar\n    logStream = new ReplaySubject<LogMessage>();\n    confirmed = false;\n\n    constructor() {\n        super();\n\n        this.state = {\n            preview: {\n                cols: {},\n                rows: [],\n                totalCount: 0\n            }\n        };\n\n        this.maxDim = 2;\n        this.buildNavigatorCfg();\n    }\n\n    ngOnInit(): void {\n        this.loadPreviewAsync();\n    }\n\n    // Override\n    buildNavigatorCfg() {\n        super.buildNavigatorCfg();\n        // Specific logic in this class\n\n        // Configure [1] ; options for preview\n        this.navigatorCfg.setElement({\n            hasPrevStep: false,\n            hasNextStep: true,\n            hasNextGuard: false,\n            visible: true\n        }, 1);\n\n        // Configure [1, 1] ; options for progress\n        this.navigatorCfg.setElement({\n            hasPrevStep: true,\n            hasNextStep: false,\n            hasNextGuard: true,\n            visible: true\n        }, 1, 1);\n\n        this.stepIndex = 0;\n        this.dimIndice = [0, 0];\n        this.forwardDimIndice = [1, 0];\n\n        this.navigator = this.navigatorCfg.getElement(0);\n        this.forwardNavigator = this.navigatorCfg.getElement(...this.forwardDimIndice);\n    }\n\n    // Not override \n    get disablePrevStep() {\n        return this.confirmed;\n    }\n\n    // Preview step\n    async loadPreviewAsync() {\n        const ret = await this.downloadAsync({\n            pageIndex: 0,\n            pageSize: 1\n        });\n        // No need to continue in this case.\n        if (ret.totalCount <= 0) {\n            return;\n        }\n        // Otherwise continue\n        const firstRow = ret.items[0];\n        // todo: Make it a IRowDatatype \n        this.state.preview.rows = [firstRow];\n        this.state.preview.cols = this.columns.reduce((sum, a) => {\n            sum[a.prop] = a.name;\n            return sum;\n        }, {});\n        this.state.preview.totalCount = ret.totalCount;\n    }\n\n    confirmExport() {\n        this.confirmed = true;\n        this.exportDataAsync();\n    }\n\n    async exportDataAsync() {\n        const data = await this.invokeDownloadAsync();\n        if (data.length) {\n            this.logStream.next({\n                type: 'INFO',\n                message: 'Start to write an excelsheet file'\n            });\n\n            const schema = this.columns.map(a => makeColumnSchema(a));\n            await writeExcelAsync(data, {\n                schema: schema,\n                fileName: 'test'\n            });\n            this.logStream.next({\n                type: 'SUCCESS',\n                message: `Excelsheet created`\n            });\n        }\n    }\n\n    // We expect that the underlying upload method is working in a transactional way.\n    // I.e., either all the data is uploaded or none of them is uploaded.\n    async invokeDownloadAsync() {\n        let data = [];\n        try {\n            let pageSize = 100;\n            let startPageIndex = 0;\n            let hasMoreData = true;\n            while (hasMoreData && (startPageIndex * pageSize < this.state.preview.totalCount)) {\n                this.logStream.next({\n                    type: 'INFO',\n                    message: `Start to retrieve the data from [${startPageIndex * pageSize}]`\n                });\n                const ret = await this.downloadAsync({\n                    pageIndex: startPageIndex,\n                    pageSize: pageSize\n                });\n\n                hasMoreData = ret.items.length > 0;\n                // data\n                data.push(...ret.items);\n                startPageIndex++;\n\n                this.logStream.next({\n                    type: 'SUCCESS',\n                    message: `Data retrieved (${data.length / this.state.preview.totalCount * 100}% completed)`\n                });\n            }\n            this.logStream.next({\n                type: 'SUCCESS',\n                message: `Data retrieval succeeded`\n            });\n        } catch (e) {\n            this.logStream.next({\n                type: 'ERR',\n                message: `Error happened (${e.message})`\n            });\n            this.logStream.next({\n                type: 'ERR',\n                message: `Data retrieval failed`\n            });\n        }\n        return data;\n    }\n\n}\n","<div class=\"card\" *ngIf=\"visible(0)\">\n    <div class=\"card-header h6\">\n        <span class=\"badge rounded-pill bg-dark me-1\">Step {{stepIndex + 1}}</span>\n        Please review the following snippet of the data to be\n        exported, and then continue to the next step.\n    </div>\n    <div class=\"card-body\">\n        <polp-data-preview [initData]=\"state.preview.rows\"\n                           [columnNames]=\"state.preview.cols\">\n        </polp-data-preview>\n    </div>\n</div>\n\n<div class=\"card\" *ngIf=\"visible(1)\">\n    <div class=\"card-header h6\">\n        <span class=\"badge rounded-pill bg-dark me-1\">Step {{stepIndex + 1}}</span>\n        Please confirm ...\n    </div>\n    <div class=\"card-body\">\n        <div *ngIf=\"!confirmed; else exportLogs\">\n            <button type=\"button\" class=\"btn btn-primary btn-lg btn-block\" (click)=\"confirmExport()\">\n                Start to export\n            </button>\n        </div>\n        <ng-template #exportLogs>\n            <log-monitor\n                [logStream]=\"logStream\"\n                theme=\"dark\"\n                title=\"Data export logs\"\n                [animated]=\"true\"\n                [icons]=\"true\">\n            </log-monitor>            \n        </ng-template>\n    </div>\n</div>\n\n<!-- Navigation -->\n<div class=\"d-flex mt-4 mb-4\">\n    <button type=\"button\" class=\"btn btn-warning\" [disabled]=\"disablePrevStep\"\n            *ngIf=\"hasPrevStep\" (click)=\"prevStep()\">\n        <fa-icon [icon]=\"faArrowLeft\"></fa-icon>\n        Previous\n    </button>\n    <span class=\"me-auto\"></span>    \n    <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"disableNextStep\"\n            *ngIf=\"hasNextStep\" (click)=\"nextStep()\">\n        Next\n        <fa-icon [icon]=\"faArrowRight\"></fa-icon>                \n    </button>            \n</div>    \n\n","import { Component, Input, OnInit } from '@angular/core';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { DownloadFuncType, IDownloadInput } from '../interfaces/excel-io.interface';\n\nexport interface IExportWizardModalInput {\n    columns: Array<{\n        name: string;\n        inputType: 'text' | 'tel' | 'email' | 'date' | 'number' | 'checkbox' | 'file'; // On purpose do not use the Type from ngx reactive table, to get ride of this dependency\n        prop: string;\n    }>;\n    downloadAsync?: DownloadFuncType;\n}\n\n@Component({\n    selector: 'polp-export-wizard-modal',\n    templateUrl: './export-wizard-modal.component.html',\n    styleUrls: ['./export-wizard-modal.component.css']\n})\nexport class ExportWizardModalComponent implements OnInit {\n\n    @Input() columns: Array<{\n        name: string;\n        inputType: 'text' | 'tel' | 'email' | 'date' | 'number' | 'checkbox' | 'file';\n        prop: string;\n    }> = [];\n    @Input() downloadAsync: DownloadFuncType = (_: IDownloadInput) => {\n        return new Promise(function(resolve, reject) {\n            resolve({\n                totalCount: 0,\n                items: []\n            });\n        });\n    };\n\n    title = 'Export wizard';\n\n    constructor(\n        public readonly bsModalRef: BsModalRef,\n        protected readonly bsModalService: BsModalService\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    close() {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-header\" polpModalDraggable>\n    <h4 class=\"modal-title\">{{title}}</h4>\n    <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"close()\">\n    </button>\n</div>\n<div class=\"modal-body\">\n    <polp-export-data-wizard [columns]=\"columns\"\n                             [downloadAsync]=\"downloadAsync\">\n    </polp-export-data-wizard>\n</div>\n\n","import { Component, Input, OnInit } from '@angular/core';\nimport { faArrowLeft, faArrowRight, faCheck, faChevronRight, faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { guid } from '@polpware/fe-utilities';\nimport { NgxNotyImpl } from '@polpware/ngx-noty';\nimport { IRowDataType, ITableDataChangeEvent, sliceArray } from '@polpware/ngx-reactive-table';\nimport { WizardAbstractComponent } from '@polpware/ngx-wizard';\nimport { Row } from 'read-excel-file/types';\nimport { readExcelAsync } from '../methods/file-ops';\n\ninterface IDataState {\n    originalData: Row[];\n    preprocessor: {\n        cols: { [key: string]: string };\n        inputRows: IRowDataType[];\n        outputRows: IRowDataType[];\n        updated: boolean;\n    };\n    mappings: Array<{\n        sourceId: string;\n        targetId: string;\n    }>;\n    postprocessor: {\n        cols: { [key: string]: string };\n        inputRows: IRowDataType[];\n        outputRows: IRowDataType[];\n        updated: boolean;\n    };\n    publication: {\n        cols: { [key: string]: string };\n        rows: IRowDataType[];\n    }\n}\n\n@Component({\n    selector: 'polp-import-data-wizard',\n    templateUrl: './import-data-wizard.component.html',\n    styleUrls: ['./import-data-wizard.component.css']\n})\nexport class ImportDataWizardComponent\n    extends WizardAbstractComponent implements OnInit {\n\n    faChevronRight = faChevronRight;\n    faArrowLeft = faArrowLeft;\n    faArrowRight = faArrowRight;\n    faSpinner = faSpinner;\n    faCheck = faCheck;\n\n    @Input() file: File;\n    @Input() targetColumns: Array<{\n        label: string;\n        id: string;\n        required: boolean;\n    }> = [];\n    @Input() uploadAsync: (data: Array<IRowDataType>) => Promise<{\n        failures: Array<IRowDataType>;\n        errors: Array<string>;\n    }>;\n\n    state: IDataState;\n    isMappingsValid: boolean = false;\n    hasImportStarted = false;\n\n    importStat: { success: number; failure: number } = { success: 0, failure: 0 };\n\n    constructor(private readonly _noty: NgxNotyImpl) {\n        super();\n\n        this.state = {\n            originalData: [],\n            preprocessor: {\n                cols: {},\n                inputRows: [],\n                outputRows: [],\n                updated: false\n            },\n            mappings: [],\n            postprocessor: {\n                inputRows: [],\n                outputRows: [],\n                cols: {},\n                updated: false\n            },\n            publication: {\n                rows: [],\n                cols: {}\n            }\n        };\n\n        this.maxDim = 4;\n        this.buildNavigatorCfg();\n    }\n\n    get sourceColumns() {\n        const ret: Array<{\n            id: string;\n            label: string;\n        }> = [];\n        const obj = this.state.preprocessor.cols;\n        for (let prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                ret.push({\n                    id: prop,\n                    label: obj[prop]\n                });\n            }\n        }\n        return ret;\n    }\n\n    ngOnInit(): void {\n        this.loadDataAsync();\n    }\n\n    // Override\n    buildNavigatorCfg() {\n        super.buildNavigatorCfg();\n        // Specific logic in this class\n\n        // Configure [1] ; options for preprocessor\n        this.navigatorCfg.setElement({\n            hasPrevStep: false,\n            hasNextStep: true,\n            hasNextGuard: false,\n            visible: true\n        }, 1);\n\n        // Configure [1, 1] ; options for column mapping\n        this.navigatorCfg.setElement({\n            hasPrevStep: true,\n            hasNextStep: true,\n            hasNextGuard: true,\n            visible: true,\n            nextStep: () => {\n                this.preparePostprecessor();\n                this.nextStepInternal();\n            },\n            prevStep: () => {\n                this.state.preprocessor.inputRows = this.state.preprocessor.outputRows;\n                this.prevStepInternal();\n            }\n        }, 1, 1);\n\n        // Configure [1, 1, 1] ; options for postprocessor\n        this.navigatorCfg.setElement({\n            hasPrevStep: true,\n            hasNextStep: true,\n            hasNextGuard: true,\n            nextStep: () => {\n                this.preparePublication();\n                this.nextStepInternal();\n            },\n            visible: true\n        }, 1, 1, 1);\n\n        // Configure [1, 1, 1, 1] ; options for publication\n        this.navigatorCfg.setElement({\n            hasPrevStep: true,\n            hasNextStep: false,\n            hasNextGuard: false,\n            visible: true,\n            prevStep: () => {\n                // todo: Disable prev button\n                this.prevStepInternal();\n            }\n        }, 1, 1, 1, 1);\n\n\n        this.stepIndex = 0;\n        this.dimIndice = [0, 0, 0, 0];\n        this.forwardDimIndice = [1, 0, 0, 0];\n\n        this.navigator = this.navigatorCfg.getElement(0);\n        this.forwardNavigator = this.navigatorCfg.getElement(...this.forwardDimIndice);\n    }\n\n    // Override \n    get disableNextStep() {\n        if (this.forwardNavigator.hasNextGuard) {\n            if (this.stepIndex == 1 && !this.isMappingsValid) {\n                // Disable if mappings are not valid\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    // Not override \n    get disablePrevStep() {\n        return this.hasImportStarted;\n    }\n\n    startImport() {\n        this.hasImportStarted = true;\n    }\n\n    async loadDataAsync() {\n        // Assume that there are data.\n        const rows = await readExcelAsync(this.file);\n        if (rows.length <= 0) {\n            return;\n        }\n        this.state.originalData = rows;\n        this.preparePreprocessor();\n    }\n\n    protected preparePreprocessor() {\n        const rows = this.state.originalData;\n        // Assume that the first row is the header\n        const columns = rows[0].reduce((sum, b, idx) => {\n            const k = 'column' + (idx + 1);\n            sum[k] = b;\n            return sum;\n        }, {});\n        this.state.preprocessor.cols = columns;\n\n        const restData = sliceArray(rows, 1, rows.length);\n        // Next prepare data\n        const elems = restData.map(a => {\n            return a.reduce((sum, b, idx) => {\n                const k = 'column' + (idx + 1);\n                sum[k] = b;\n                return sum;\n            }, { id: guid() });\n        });\n\n        this.state.preprocessor.inputRows = elems;\n        this.state.preprocessor.outputRows = elems;\n        this.state.preprocessor.updated = true;\n    }\n\n    resetPreprocessor() {\n        this.preparePreprocessor();\n        this._noty.success('Data has been reset successfully!', 'Operation result');\n    }\n\n    updatePreprocessor(event: ITableDataChangeEvent) {\n        this.state.preprocessor.outputRows = event.rows;\n        this.state.preprocessor.updated = true;\n    }\n\n    updateMappings(data: Array<{\n        sourceId: string;\n        targetId: string;\n    }>) {\n        this.state.mappings = [...data];\n    }\n\n    validateMappings(errors: any) {\n        if (errors) {\n            this.isMappingsValid = false;\n        } else {\n            this.isMappingsValid = true;\n        }\n    }\n\n    preparePostprecessor() {\n\n        // Prepare columns\n        const columns = {};\n        for (let i = 0; i < this.state.mappings.length; i++) {\n            const elem = this.state.mappings[i];\n            const source = this.state.preprocessor.cols[elem.sourceId];\n            const target = this.targetColumns.find(a => a.id == elem.targetId);\n            columns[elem.sourceId] = `${source} => ${target.label}`;\n        }\n        this.state.postprocessor.cols = columns;\n\n        // If the predecessor has been changed.\n        if (this.state.preprocessor.updated) {\n            this.state.preprocessor.updated = false;\n\n            this.state.postprocessor.inputRows = this.state.preprocessor.outputRows;\n            this.state.postprocessor.outputRows = this.state.postprocessor.inputRows;\n            this.state.postprocessor.updated = true;\n        } else {\n            this.state.postprocessor.inputRows = this.state.postprocessor.outputRows;\n        }\n    }\n\n    updatePostprocessor(event: ITableDataChangeEvent) {\n        this.state.postprocessor.outputRows = event.rows;\n        this.state.postprocessor.updated = true;\n    }\n\n    resetPostprocessor() {\n        this.state.preprocessor.updated = false;\n        this.state.postprocessor.inputRows = this.state.preprocessor.outputRows;\n        this.state.postprocessor.outputRows = this.state.postprocessor.inputRows;\n        this.state.postprocessor.updated = true;\n        this._noty.success('Data has been reset successfully!', 'Operation result');\n    }\n\n    preparePublication() {\n        // Make cols\n        const cols = {};\n        this.state.mappings.forEach(elem => {\n            cols[elem.targetId] = this.targetColumns.find(a => a.id == elem.targetId).label;\n        });\n        this.state.publication.cols = cols;\n\n        this.state.publication.rows =\n            this.state.postprocessor.outputRows.map(elem => {\n                return this.mapObject(elem);\n            });\n    }\n\n    protected mapObject(a: IRowDataType) {\n        const b = { id: a.id };\n        this.state.mappings.forEach(elem => {\n            b[elem.targetId] = a[elem.sourceId];\n        });\n        return b;\n    }\n\n    updateImportStat(evt: { success: number; failure: number }) {\n        this.importStat.success = evt.success;\n        this.importStat.failure = evt.failure;\n    }\n}\n","<div class=\"card\" *ngIf=\"visible(0)\">\n    <div class=\"card-header h6\">\n        <span class=\"badge rounded-pill bg-dark me-1\">Step {{stepIndex + 1}}</span>\n        Please review the data below, make changes, and then continue\n        to the next step.\n    </div>\n    <div class=\"card-body\">\n        <polp-data-processor [initData]=\"state.preprocessor.inputRows\"\n                             [columnNames]=\"state.preprocessor.cols\"\n                             (onReset)=\"resetPreprocessor()\"\n                             (dataChange)=\"updatePreprocessor($event)\">\n        </polp-data-processor>\n    </div>\n</div>\n\n<div class=\"card\" *ngIf=\"visible(1)\">\n    <div class=\"card-header h6\">\n        <span class=\"badge rounded-pill bg-dark me-1\">Step {{stepIndex + 1}}</span>\n        Please define the mappings from source columns to target\n        columns, and then move to the next step.\n    </div>\n    <div class=\"card-body\">\n        <polp-define-column-mapping [sourceColumns]=\"sourceColumns\"\n                                    [targetColumns]=\"targetColumns\"\n                                    (onValueChanged)=\"updateMappings($event)\"\n                                    (onValidation)=\"validateMappings($event)\"\n                                    [initValue]=\"state.mappings\">\n        </polp-define-column-mapping>\n    </div>\n</div>\n\n<div class=\"card\" *ngIf=\"visible(1, 1)\">\n    <div class=\"card-header h6\">\n        <span class=\"badge rounded-pill bg-dark me-1\">Step {{stepIndex + 1}}</span>\n        Please review the data below, make changes, and then continue\n        to the next step.\n    </div>\n    <div class=\"card-body\">\n        <polp-data-processor [initData]=\"state.postprocessor.inputRows\"\n                             [columnNames]=\"state.postprocessor.cols\"\n                             (onReset)=\"resetPostprocessor()\"\n                             (dataChange)=\"updatePostprocessor($event)\">\n        </polp-data-processor>\n    </div>\n</div>\n\n<div class=\"card\" *ngIf=\"visible(1, 1, 1)\">\n    <div class=\"card-header h6\">\n        <span class=\"badge rounded-pill bg-dark me-1\">Step {{stepIndex + 1}}</span>\n        Please review the data below, and upload some or all of them.\n    </div>\n    <div class=\"card-body\">\n        <polp-data-publication [columnNames]=\"state.publication.cols\"\n                               [uploadAsync]=\"uploadAsync\"\n                               (onImport)=\"startImport()\"\n                               (afterImport)=\"updateImportStat($event)\"\n                               [initData]=\"state.publication.rows\">\n        </polp-data-publication>\n    </div>\n</div>\n\n<!-- Navigation -->\n<div class=\"d-flex mt-4 mb-4\">\n    <button type=\"button\" class=\"btn btn-warning\" [disabled]=\"disablePrevStep\"\n            *ngIf=\"hasPrevStep\" (click)=\"prevStep()\">\n        <fa-icon [icon]=\"faArrowLeft\"></fa-icon>\n        Previous\n    </button>\n    <span class=\"me-auto\"></span>    \n    <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"disableNextStep\"\n            *ngIf=\"hasNextStep\" (click)=\"nextStep()\">\n        Next\n        <fa-icon [icon]=\"faArrowRight\"></fa-icon>                \n    </button>            \n</div>    \n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { IRowDataType } from '@polpware/ngx-reactive-table';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { ImportDataWizardComponent } from '../import-data-wizard/import-data-wizard.component';\n\nexport interface IImportWizardModalInput {\n    file: File;\n    columns: Array<{\n        id: string;\n        label: string;\n        required: boolean;\n    }>;\n    uploadAsync?: (data: Array<IRowDataType>) => Promise<{\n        failures: Array<IRowDataType>;\n        errors: Array<string>;\n    }>;\n    successCallback?: () => any;\n}\n\n@Component({\n    selector: 'polp-import-wizard-modal',\n    templateUrl: './import-wizard-modal.component.html',\n    styleUrls: ['./import-wizard-modal.component.css']\n})\nexport class ImportWizardModalComponent implements OnInit {\n\n    @Input() file: File;\n    @Input() columns: Array<{\n        id: string;\n        label: string;\n        required: boolean;\n    }> = [];\n    @Input() uploadAsync: (data: Array<IRowDataType>) => Promise<{\n        failures: Array<IRowDataType>;\n        errors: Array<string>;\n    }> = (data: Array<IRowDataType>) => {\n        return new Promise(function(resolve, reject) {\n            resolve({\n                failures: [],\n                errors: []\n            });\n        });\n    };\n    @Input() successCallback: () => any = null;\n\n    @ViewChild('importDataWizard', { static: true }) importDataWizard: ImportDataWizardComponent;\n\n    title = 'Import wizard';\n\n    constructor(\n        public readonly bsModalRef: BsModalRef,\n        protected readonly bsModalService: BsModalService\n    ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    close() {\n\n        if (this.importDataWizard.importStat.success) {\n            this.successCallback && this.successCallback();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n}\n","<div class=\"modal-header\" polpModalDraggable>\n    <h4 class=\"modal-title\">{{title}}</h4>\n    <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"close()\">\n    </button>\n</div>\n<div class=\"modal-body\">\n    <polp-import-data-wizard #importDataWizard\n                             [file]=\"file\"\n                             [targetColumns]=\"columns\"\n                             [uploadAsync]=\"uploadAsync\">\n    </polp-import-data-wizard>\n</div>\n","import { Injectable } from '@angular/core';\nimport { IInputFieldSpec, IPromptFormInputs, PromptModalComponent } from '@polpware/bs-components';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { lastValueFrom } from 'rxjs';\nimport { DropFileModalComponent, IModalInput as IDropFileInput } from '../drop-file-modal/drop-file-modal.component';\nimport { ExportWizardModalComponent, IExportWizardModalInput } from '../export-wizard-modal/export-wizard-modal.component';\nimport { IImportWizardModalInput, ImportWizardModalComponent } from '../import-wizard-modal/import-wizard-modal.component';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ModalUtilsService {\n\n    constructor(private readonly _modalService: BsModalService) { }\n\n    showFileDropDialogAsync(input: IDropFileInput) {\n\n        const modalRef = this._modalService.show(DropFileModalComponent, {\n            animated: true,\n            ignoreBackdropClick: true,\n            initialState: Object.assign({}, input),\n            keyboard: false,\n            class: 'modal-dialog-centered'\n        });\n\n        return lastValueFrom(modalRef.content.result);\n    }\n\n    showImportDialog(input: IImportWizardModalInput) {\n        this._modalService.show(ImportWizardModalComponent, {\n            animated: true,\n            ignoreBackdropClick: true,\n            initialState: Object.assign({}, input),\n            keyboard: false,\n            class: 'modal-xl'\n        });\n    }\n\n    showExportDialog(input: IExportWizardModalInput) {\n        this._modalService.show(ExportWizardModalComponent, {\n            animated: true,\n            ignoreBackdropClick: true,\n            initialState: Object.assign({}, input),\n            keyboard: false,\n            class: 'modal-xl'\n        });\n    }\n\n    public async selectExportTargetAsync(options: Array<{\n        value: string;\n        label: string;\n    }>) {\n\n        let inputFields: IInputFieldSpec[] = [\n            {\n                name: 'targetId',\n                label: 'Select one',\n                value: '',\n                category: 'radio',\n                options: options,\n                validators: {}\n            }\n        ];\n\n        const alertInfo = `<div class=\"alert alert-info\">\nThis form contains table questions. \nThe response to each table will be exported into a separate spreadsheet. \nPlease select one table question or none.\n</div>`;\n\n        const initState: IPromptFormInputs = {\n            title: 'What do you want to export?',\n            enableEnter: false,\n            hideCloseBtn: true,\n            innerBody: alertInfo,\n            fields: inputFields,\n            hideCancelBtn: false,\n            hideConfirmBtn: false\n        };\n\n        const modalRef = this._modalService.show(PromptModalComponent, {\n            animated: true,\n            ignoreBackdropClick: true, /* so that we can capture the close event */\n            keyboard: false, /* So that we can capture the close event. */\n            initialState: initState,\n            class: 'modal-dialog-centered'\n        });\n\n        return lastValueFrom(modalRef.content.result);\n\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { PolpBsComponentsModule } from '@polpware/bs-components';\nimport { PolpDraggableModule } from '@polpware/modal-directives';\nimport { PolpwareNgxPipesModule } from '@polpware/ngx-pipes';\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { NgxDropzoneModule } from 'ngx-dropzone';\nimport { LogMonitorModule } from 'ngx-log-monitor';\nimport { DataPreviewComponent } from './data-preview/data-preview.component';\nimport { DataProcessorComponent } from './data-processor/data-processor.component';\nimport { DataPublicationComponent } from './data-publication/data-publication.component';\nimport { DataStagingComponent } from './data-staging/data-staging.component';\nimport { DefineColumnMappingComponent } from './define-column-mapping/define-column-mapping.component';\nimport { DropFileModalComponent } from './drop-file-modal/drop-file-modal.component';\nimport { ExportDataWizardComponent } from './export-data-wizard/export-data-wizard.component';\nimport { ExportWizardModalComponent } from './export-wizard-modal/export-wizard-modal.component';\nimport { ImportDataWizardComponent } from './import-data-wizard/import-data-wizard.component';\nimport { ImportWizardModalComponent } from './import-wizard-modal/import-wizard-modal.component';\n\n@NgModule({\n    declarations: [\n        DropFileModalComponent,\n        ImportDataWizardComponent,\n        ImportWizardModalComponent,\n        DefineColumnMappingComponent,\n        DataStagingComponent,\n        DataPublicationComponent,\n        DataProcessorComponent,\n        ExportDataWizardComponent,\n        ExportWizardModalComponent,\n        DataPreviewComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\n        ModalModule,\n        PopoverModule,\n        CollapseModule,\n\n        NgxDropzoneModule,\n        PolpBsComponentsModule,\n        PolpDraggableModule,\n        FontAwesomeModule,\n        NgxDatatableModule,\n        PolpwareNgxPipesModule,\n\n        LogMonitorModule\n    ],\n    exports: [\n        DropFileModalComponent,\n        ImportDataWizardComponent,\n        ImportWizardModalComponent,\n        DefineColumnMappingComponent,\n        DataStagingComponent,\n        DataPublicationComponent,\n        DataProcessorComponent,\n        ExportDataWizardComponent,\n        ExportWizardModalComponent,\n        DataPreviewComponent\n    ]\n})\nexport class PolpDataTransportModule { }\n","/*\n * Public API Surface of data-transport\n */\n\nexport * from './lib/data-preview/data-preview.component';\nexport * from './lib/data-processor/data-processor.component';\nexport * from './lib/data-publication/data-publication.component';\nexport * from './lib/data-staging/data-staging.component';\nexport * from './lib/define-column-mapping/define-column-mapping.component';\nexport * from './lib/drop-file-modal/drop-file-modal.component';\nexport * from './lib/export-data-wizard/export-data-wizard.component';\nexport * from './lib/export-wizard-modal/export-wizard-modal.component';\nexport * from './lib/import-data-wizard/import-data-wizard.component';\nexport * from './lib/import-wizard-modal/import-wizard-modal.component';\nexport * from './lib/interfaces/excel-io.interface';\nexport * from './lib/methods/file-ops';\nexport * from './lib/services/modal-utils.service';\nexport * from './lib/data-transport.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i2","i3","i4","i5","i1.DataPreviewComponent","i2.ExportDataWizardComponent","i2.DataProcessorComponent","i3.DefineColumnMappingComponent","i4.DataPublicationComponent","i2.ImportDataWizardComponent"],"mappings":"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"}